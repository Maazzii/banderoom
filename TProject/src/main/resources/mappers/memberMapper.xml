<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Config 3.0/EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.project.mapper.memberMapper">
	<select id="isEmailKeyExist" resultType="int" parameterType="emailRegVO">
		select count(*) from emailreg
		where email = #{email}
	</select>
	
	<insert id="setEmailKey" parameterType="emailRegVO">
		insert into emailreg (
			email,
			regkey,
			deadline
		) values (
			#{email},
			#{regkey},
			(date_add(now(), interval 30 minute))
		)
	</insert>
	
	<update id="updateEmailKey" parameterType="emailRegVO">
		update emailreg set
			regkey = #{regkey},
			deadline = (date_add(now(), interval 30 minute))
			
		where email = #{email}
	</update>
	
	<select id="selectEmailReg" parameterType="emailRegVO" resultType="emailRegVO">
		select email, regkey, deadline
		from emailreg
		where email = #{email}
	</select>
	
	<select id="isEmailExist" resultType="int" parameterType="Map">
		select count(email) from 
		<if test="memberType == 'general'">
			general_members 
		</if>
		<if test="memberType == 'host'">
			host_members 
		</if>
		where email = #{email}
	</select>
	
	<select id="isNicknameExist" resultType="int" parameterType="Map">
		select count(nickname) from
		<if test="memberType == 'general'">
			general_members 
		</if>
		<if test="memberType == 'host'">
			host_members 
		</if>
		where nickname = #{nickname}
	</select>
	
	
	<select id="isTelKeyExist" resultType="int" parameterType="telRegVO">
		select count(*) from telreg
		where tel = #{tel}
	</select>
	
	<insert id="setTelKey" parameterType="telRegVO">
		insert into telreg (
			tel,
			regkey,
			deadline
		) values (
			#{tel},
			#{regkey},
			(date_add(now(), interval 5 minute))
		)
	</insert>
	
	<update id="updateTelKey" parameterType="telRegVO">
		update telreg set
			regkey = #{regkey},
			deadline = (date_add(now(), interval 5 minute))
			
		where tel = #{tel}
	</update>
	
	<select id="selectTelReg" parameterType="telRegVO" resultType="telRegVO">
		select tel, regkey, deadline
		from telreg
		where tel = #{tel}
	</select>
	
	<insert id="gjoin" parameterType="generalMembersVO">
		insert into general_members (
			email,
			password,
			name,
			nickname,
			address,
			<if test="addressDetail != null">
				addressdetail,
			</if>
			addr1,
			<if test="addr2 != null">
				addr2,
			</if>
			tel,
			profilesrc,
			gender,
			iskakao
		) values (
			#{email},
			#{password},
			#{name},
			#{nickname},
			#{address},
			<if test="addressDetail != null">
				#{addressDetail},
			</if>
			#{addr1},
			<if test="addr2 != null">
				#{addr2},
			</if>
			#{tel},
			#{profileSrc},
			#{gender},
			#{isKakao}
		)
	</insert>
	
	<select id="kakaoLogin" parameterType="generalMembersVO" resultType="generalMembersVO">
		select midx,
					 email,
					 name,
					 nickname,
					 address,
					 addressDetail,
					 addr1,
					 addr2,
					 tel,
					 profileSrc,
					 gender,
					 point,
					 auth,
					 isKakao,
					 joinDate
		from general_members
		where email = #{email}
		and isKakao = 'Y'
		and auth != 2
	</select>
	
	<select id="gLogin" parameterType="generalMembersVO" resultType="generalMembersVO">
		select midx,
					 email,
					 name,
					 nickname,
					 address,
					 addressDetail,
					 addr1,
					 addr2,
					 tel,
					 profileSrc,
					 gender,
					 point,
					 auth,
					 isKakao,
					 joinDate
		from general_members
		where email = #{email}
		and password = #{password}
		and isKakao = 'N'
		and auth != 2
	</select>
	
	<select id="isBrnExist" resultType="int" parameterType="String">
		select count(brn) from host_members where brn = #{brn}
	</select>
	
	
	<insert id="hjoin" parameterType="hostMembersVO">
		insert into host_members (
			brn,
			email,
			password,
			name,
			nickname,
			address,
			<if test="addressDetail != null">
				addressdetail,
			</if>
			addr1,
			<if test="addr2 != null">
				addr2,
			</if>
			tel,
			profilesrc,
			gender
		) values (
			#{brn},
			#{email},
			#{password},
			#{name},
			#{nickname},
			#{address},
			<if test="addressDetail != null">
				#{addressDetail},
			</if>
			#{addr1},
			<if test="addr2 != null">
				#{addr2},
			</if>
			#{tel},
			#{profileSrc},
			#{gender}
		)
	</insert>
	
	<select id="hLogin" parameterType="hostMembersVO" resultType="hostMembersVO">
		select midx,
					 brn,
					 email,
					 name,
					 nickname,
					 address,
					 addressDetail,
					 addr1,
					 addr2,
					 tel,
					 profileSrc,
					 gender,
					 auth,
					 joinDate
		from host_members
		where brn = #{brn}
		and password = #{password}
		and auth != 2
	</select>
	
	<select id="oneMemberInfo" parameterType="generalMembersVO" resultType="generalMembersVO">
		select * from general_members where midx=#{mIdx}
	</select>
	<select id="hostMemberInfo" parameterType="generalMembersVO" resultType="hostMembersVO">
		select midx,
					 brn,
					 email,
					 name,
					 nickname,
					 address,
					 addressDetail,
					 addr1,
					 addr2,
					 tel,
					 profileSrc,
					 gender,
					 auth,
					 joinDate
		from host_members
		where midx=#{mIdx}
	</select>
	
	<insert id="sendMessage" parameterType="map">
		insert into messages(
			sender
			,receiver
			,content
			,sentdate
		) values(
			#{sender}
			,#{receiver}
			,#{content}
			,now()
		)
	</insert>
	
	<select id="listMessage" parameterType="map" resultType="messagesVO">
		<![CDATA[
			select * from
			(SELECT
			  @rownum:=@rownum+1 as rownum, 
			  msg.*
			FROM messages msg,(select @rownum:=0) rn_msg ]]>
		<if test="receiver != null and receiver != ''">
			where msg.receiver = #{receiver}
		</if>
		<if test="sender != null and sender != ''">
			where msg.sender = #{sender}
		</if>
			order by msgidx desc) list
		<![CDATA[where rownum>=#{start} and rownum <=#{end}]]>
	</select>
	
	
	
	<select id="getHostMember" parameterType="hostMembersVO" resultType="hostMembersVO">
		select * from host_members where midx=#{mIdx}
	</select>
	
	<update id="setPoint" parameterType="pointsVO">
		update general_members set
			point = #{balance}
			where midx = #{mIdx}
	</update>
	
	<!-- 내 정보 업데이트 부분 -->
	<update id="ginfoUpdate" parameterType="generalMembersVO">
		update general_members set
			<if test="nickname != null">
			nickname = #{nickname},
			</if>
			<if test="profileSrc != null">
			profilesrc = #{profileSrc},
			</if>
			<if test="password != null">
				password = #{password},
			</if>
			addr1 = #{addr1},
			addr2 = #{addr2},
			address = #{address},
			addressDetail = #{addressDetail},
			name = #{name},
			gender = #{gender},
			tel = #{tel}
		where midx = #{mIdx}
	</update>
	
	<update id="hinfoUpdate" parameterType="hostMembersVO">
		update host_members set
			<if test="nickname != null">
			nickname = #{nickname},
			</if>
			<if test="profileSrc != null">
			profilesrc = #{profileSrc},
			</if>
			<if test="password != null">
				password = #{password},
			</if>
			addr1 = #{addr1},
			addr2 = #{addr2},
			address = #{address},
			addressDetail = #{addressDetail},
			name = #{name},
			gender = #{gender},
			tel = #{tel}
		where midx = #{mIdx}
	</update>
	
	<select id="selectCurrPw" parameterType="map" resultType="String">
		select password from
		<if test="memberType == 'general'">
			general_members 
		</if>
		<if test="memberType == 'host'">
			host_members 
		</if>
		where midx = #{mIdx}
	</select>
	<!-- 내 정보 업데이트 부분 -->
</mapper>