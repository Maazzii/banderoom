<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Config 3.0/EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.project.mapper.spaceMapper">
	<insert id="spaceReg" parameterType="spacesVO" useGeneratedKeys="true" keyProperty="idx">
	
		insert into spaces (
			type,
			name,
			address,
			<if test="addressDetail != null">
				addressdetail,
			</if>
			addr1,
			<if test="addr2 != null">
				addr2,
			</if>
			info,
			facility,
			caution,
			capacity,
			cost,
			<if test="thumb != null">
				thumb,
			</if>
			hostidx
		) values (
			#{type},
			#{name},
			#{address},
			<if test="addressDetail != null">
				#{addressDetail},
			</if>
			#{addr1},
			<if test="addr2 != null">
				#{addr2},
			</if>
			#{info},
			#{facility},
			#{caution},
			#{capacity},
			#{cost},
			<if test="thumb != null">
				#{thumb},
			</if>
			#{hostIdx}
		)
	</insert>
	
	<update id="update" parameterType="spacesVO">
		update spaces set
		
			<if test="thumb != null and thumb != ''">
				thumb = #{thumb},
			</if>
			<if test="thumb == null or thumb == ''">
				thumb = '',
			</if>
			type = #{type},
			name = #{name},
			address = #{address},
			<if test="addressDetail != null and addressDetail != ''">
				addressdetail = #{addressDetail},
			</if>
			<if test="addressDetail == null or addressDetail == ''">
				addressdetail = '',
			</if>
			addr1 = #{addr1},
			<if test="addr2 != null and addr2 != ''">
				addr2 = #{addr2},
			</if>
			<if test="addr2 == null or addr2 == ''">
				addr2 = '',
			</if>
			info = #{info},
			facility = #{facility},
			caution = #{caution},
			capacity = #{capacity},
			cost = #{cost}
		
		where idx = #{idx}
	</update>
	
	<insert id="insertSpacePictures" parameterType="spacePicturesVO">
		insert into space_pictures (
			spaceidx,
			src,
			thumbsrc
		) values (
			#{spaceIdx},
			#{src},
			#{thumbSrc}
		)
	</insert>
	
	<delete id="deleteSpacePictrues" parameterType="spacesVO">
		delete from space_pictures
		where spaceidx = #{idx}
	</delete>
	
	<select id="getLocations" resultType="locationsVO">
		select * from locations order by addr1, addr2
	</select>
	
	<select id="getSpaceList" resultType="spacesVO" parameterType="spacesVO">
		select idx,
					 type,
					 name,
					 address,
					 addressdetail,
					 addr1,
					 addr2,
					 info,
					 facility,
					 caution,
					 capacity,
					 cost,
					 regdate,
					 hostidx,
					 status,
					 thumb
		from spaces 
		where status != 3
			<if test="hostIdx != 0">
			and hostidx = #{hostIdx}
			</if>
	</select>
	
	<select id="details" resultType="spacesVO" parameterType="spacesVO">
		select idx,
					 type,
					 name,
					 address,
					 addressdetail,
					 addr1,
					 addr2,
					 info,
					 facility,
					 caution,
					 capacity,
					 cost,
					 regdate,
					 hostidx,
					 status,
					 thumb
		from spaces
		where idx = #{idx}
	</select>
	
	<select id="spacePictureList" resultType="spacePicturesVO" parameterType="spacesVO">
		select pictureidx,
					 spaceidx,
					 src,
					 thumbsrc
		from space_pictures
		where spaceidx = #{idx}
	</select>
	
	<update id="delete" parameterType="spacesVO">
		update spaces set status = 3 where idx = #{idx}
	</update>
	
	<select id="likedSpacesList" parameterType="spacesVO" resultType="likedSpacesVO">
		select spaceidx, midx
		from liked_spaces
		where spaceidx = #{idx}
	</select>
	
	<select id="getLikedStatus" parameterType="likedSpacesVO" resultType="int">
		select count(*) from liked_spaces
		where spaceidx = #{spaceIdx} and midx = #{mIdx}
	</select>
	
	<insert id="likeSpace" parameterType="likedSpacesVO">
		insert into liked_spaces (
			spaceidx,
			midx
		) values (
			#{spaceIdx},
			#{mIdx}
		)
	</insert>
	
	<delete id="unlikeSpace" parameterType="likedSpacesVO">
		delete from liked_spaces
		where spaceidx = #{spaceIdx} and midx = #{mIdx}
	</delete>
	
	<update id="acceptSpace" parameterType="spacesVO">
		update spaces
		set status = 1
		where idx = #{idx}
	</update>
	
	<update id="refuseSpace" parameterType="spacesVO">
		update spaces
		set status = 2
		where idx = #{idx}
	</update>
	
	<update id="requestAccept" parameterType="spacesVO">
		update spaces
		set status = 0
		where idx = #{idx}
	</update>
	
	<select id="spaceList" resultType="spacesVO" parameterType="HashMap">
		select * from (
			select row_number() over(order by idx) as rownum, s.*
			from spaces s where s.status = 1
			
			<if test="vo != null">
				<if test="vo.addr1 != null and vo.addr1 != ''">
				and addr1 = #{vo.addr1}
				</if>
				<if test="vo.addr2 != null and vo.addr2 != ''">
				and addr2 = #{vo.addr2}
				</if>
				<if test="vo.type != null and vo.type != ''">
				and type = #{vo.type}
				</if>
				<if test="vo.name != null and vo.name != ''">
				and name like concat('%', #{vo.name}, '%')
				</if>
				
			</if>
			
		) a where a.rownum <![CDATA[>=]]> #{start} and a.rownum <![CDATA[<=]]> #{end}
	</select>
	
	<select id="spaceReviewList" parameterType="spacesVO" resultType="spaceReviewVO">
		select reviewidx,
					 spaceidx,
					 picturesrc,
					 score,
					 midx,
					 mnickname,
					 content,
					 regdate
		from space_review
		where spaceidx = #{idx}
	</select>
	
	<!-- 테스트용 -->
	<select id="getAddr1" resultType="String">
		select distinct addr1 from locations;
	</select>
	
	<select id="getAddr2" parameterType="locationsVO" resultType="String">
		select addr2 from locations where addr1 = #{addr1}
	</select>
	
	<insert id="insertRsv" parameterType="reservationsVO" useGeneratedKeys="true" keyProperty="resIdx">
		insert into reservations(
			midx,
			spaceidx,
			peoplenum,
			startdate,
			enddate,
			rsvhours,
			cost,
			usedpoint,
			totalcost
		) values (
			#{mIdx},
			#{spaceIdx},
			#{peopleNum},
			#{startDate},
			#{endDate},
			#{rsvHours},
			#{cost},
			#{usedPoint},
			#{totalCost}
		)
	</insert>
	
	<insert id="insertPoint" parameterType="pointsVO">
		insert into points (
			residx,
			midx,
			content,
			amount,
			balance
		) values (
			#{resIdx},
			#{mIdx},
			#{content},
			#{amount},
			#{balance}
		)
	</insert>
	
	<select id="getRSV" parameterType="reservationsVO" resultType="reservationsVO">
		select * from reservations where residx = #{resIdx}
	</select>
	
	<select id="getRsvFullDates" parameterType="hashmap" resultType="String">
		select date from (
			select date(startdate) as date, sum(rsvhours) as rsvhours
			from reservations
			where spaceidx = #{spaceIdx} and date(startdate) between #{nowDate} and #{afterMonth}
			group by date
			) a	where a.rsvhours = 15;
	</select>
	
	<select id="getRsvHours" parameterType="Map" resultType="Map">
		select startDate, endDate from reservations
		where spaceidx = #{spaceIdx} and date(startdate) = #{date}
	</select>
	
	<select id="getCurrentRsv" parameterType="generalMembersVO" resultType="reservationsVO">
		select 
			a.residx, 
			a.midx, 
			a.spaceidx, 
			a.peoplenum, 
			a.startdate, 
			a.enddate, 
			a.rsvhours, 
			a.resdate, 
			b.idx,
			b.type, 
			b.name, 
			b.address, 
			b.addressDetail,
			b.addr1, 
			b.addr2, 
			b.thumb 
		from reservations a, spaces b
		where a.enddate >= now()
		and a.spaceidx = b.idx
		order by startdate;
	</select>
</mapper>